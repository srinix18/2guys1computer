# -*- coding: utf-8 -*-
"""arithmania.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dCY_cgsGuA0nULRtTCpAwsJhVXHktH7r

converting text in text data into binary
"""

def copy_file(input_file, output_file):
    try:
        # Open the input file in read mode
        with open(input_file, 'r') as f:
            # Read the contents of the input file
            data = f.read()

        # Open the output file in write mode
        with open(output_file, 'w') as f:
            # Write the contents to the output file
            f.write(data)

        print("File copied successfully!")

    except FileNotFoundError:
        print("File not found. Please provide valid file paths.")
    except Exception as e:
        print("An error occurred:", str(e))

# Provide the paths of the input and output files
input_file_path = "test1.txt"
output_file_path = "output.txt"

# Call the function to copy the contents
copy_file(input_file_path, output_file_path)

"""Private and Public Key Generator

"""

'''import rsa

public_key, private_key = rsa.newkeys(1024)
with open("public.pem","wb") as f:
    f.write(public_key.save_pkcs1("PEM"))
with open("private.pem","wb") as f:
    f.write(private_key.save_pkcs1("PEM"))'''

import os

import string
import random
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
from cryptography.hazmat.primitives import padding
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes

def generate_key_and_iv(password, salt):
    # Derive a key and IV from the password and salt using PBKDF2
    kdf = PBKDF2HMAC(
        algorithm=hashes.SHA256(),
        length=32 + 16,  # 32 bytes for key and 16 bytes for IV
        salt=salt,
        iterations=100000,
        backend=default_backend()
    )
    key_and_iv = kdf.derive(password)

    # Split the key and IV
    key = key_and_iv[:32]
    iv = key_and_iv[32:]

    return key, iv

def encrypt_file(input_file, output_file):
    # Generate a random password for encryption
    password = makeKey().encode()

    # Write the password to a text file
    with open('password.txt', 'w') as password_file:
        password_file.write(password.decode())

    # Generate a random salt
    salt = os.urandom(16)

    # Generate key and IV using the password and salt
    key, iv = generate_key_and_iv(password, salt)

    # Initialize AES cipher with CBC mode
    cipher = Cipher(algorithms.AES(key), modes.CBC(iv), backend=default_backend())
    encryptor = cipher.encryptor()

    # Read the contents of the input file
    with open(input_file, 'rb') as f:
        plaintext = f.read()

    # Apply PKCS7 padding to the plaintext
    padder = padding.PKCS7(128).padder()
    padded_plaintext = padder.update(plaintext) + padder.finalize()

    # Encrypt the padded plaintext
    ciphertext = encryptor.update(padded_plaintext) + encryptor.finalize()

    # Write the salt, IV, and ciphertext to the output file
    with open(output_file, 'wb') as f:
        f.write(salt)
        f.write(iv)
        f.write(ciphertext)

    # Write the encryption key to a text file
    with open('key.txt', 'wb') as key_file:
        key_file.write(key)

    print("Encryption completed successfully!")

def makeKey():
    chars = string.ascii_letters + string.digits + string.punctuation + " "
    shuffled_chars = list(chars)
    while any(shuffled_chars[i] == chars[i] for i in range(len(chars))):
        random.shuffle(shuffled_chars)
    return ''.join(shuffled_chars)




 # Provide the paths of the input and output files
input_file_path = "output.txt"
output_file_path = "encrypted_output.txt"

# Call the function to encrypt the contents of the input file
encrypt_file(input_file_path, output_file_path)

"""hiding in the image"""

import cv2

def hide_encrypted_data_in_image(image_path, encrypted_binary_file_path, output_image_path):
    # Load the image
    image = cv2.imread(image_path)

    # Read the encrypted binary data from the text file
    with open(encrypted_binary_file_path, 'rb') as file:
        encrypted_binary_data = file.read()

    # Convert the binary data to binary string
    binary_data = ''.join(format(byte, '08b') for byte in encrypted_binary_data)

    # Get the length of the binary string (data length)
    data_length = len(binary_data)

    # Get the shape of the image
    rows, cols, _ = image.shape

    # Counter for the binary string
    binary_index = 0

    # Iterate through each pixel in the image
    for i in range(rows):
        for j in range(cols):
            # Extract RGB values of the pixel
            r, g, b = image[i, j]

            # Convert RGB values to binary strings
            r_binary = format(r, '08b')
            g_binary = format(g, '08b')
            b_binary = format(b, '08b')

            # Manipulate the least significant bit of each color channel
            if binary_index < data_length:
                r_binary = r_binary[:-1] + binary_data[binary_index]
                binary_index += 1
            if binary_index < data_length:
                g_binary = g_binary[:-1] + binary_data[binary_index]
                binary_index += 1
            if binary_index < data_length:
                b_binary = b_binary[:-1] + binary_data[binary_index]
                binary_index += 1

            # Convert binary strings back to integers
            r_new = int(r_binary, 2)
            g_new = int(g_binary, 2)
            b_new = int(b_binary, 2)

            # Update the pixel with the new RGB values
            image[i, j] = [r_new, g_new, b_new]

    # Save the image with hidden data
    cv2.imwrite(output_image_path, image)

# Example usage
image_path = 'test_image.png'  # Path to your PNG image file
encrypted_binary_file_path = 'encrypted_output.txt'  # Path to your encrypted binary data file
output_image_path = 'output_image_with_hidden_encrypted_data.png'  # Path for the output image with hidden encrypted data

# Hide encrypted data in the image
hide_encrypted_data_in_image(image_path, encrypted_binary_file_path, output_image_path)

"""extract the data out of the image"""

import cv2
import base64

def extract_hidden_data_from_image(image_path, output_file_path):
    # Load the image
    image = cv2.imread(image_path)

    # Check if the image was loaded successfully
    if image is None:
        print("Error: Unable to load the image.")
        return

    # Initialize an empty string to store the extracted binary data
    extracted_binary_data = ''

    # Get the shape of the image
    rows, cols, _ = image.shape

    # Iterate through each pixel in the image
    for i in range(rows):
        for j in range(cols):
            # Extract RGB values of the pixel
            r, g, b = image[i, j]

            # Convert RGB values to binary strings
            r_binary = format(r, '08b')
            g_binary = format(g, '08b')
            b_binary = format(b, '08b')

            # Extract the least significant bit from each color channel and append to the extracted binary data
            extracted_binary_data += r_binary[-1]
            extracted_binary_data += g_binary[-1]
            extracted_binary_data += b_binary[-1]

    # Write the extracted binary data to a binary file
    with open(output_file_path, 'wb') as file:
        file.write(bytes(int(extracted_binary_data[i:i+8], 2) for i in range(0, len(extracted_binary_data), 8)))

    print("Data extracted successfully.")

# Example usage
image_path = 'output_image_with_hidden_encrypted_data.png'  # Path to the image with hidden data
output_file_path = 'extracted_encrypted_data.txt'  # Path for the output file to save the extracted data

# Extract hidden data from the image
extract_hidden_data_from_image(image_path, output_file_path)

"""decrypting"""

import os
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives import padding
from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes

def decrypt_file(input_file, output_file):
    # Read the salt, IV, and ciphertext from the encrypted file
    with open(input_file, 'rb') as f:
        # Read the salt (16 bytes)
        salt = f.read(16)
        # Read the IV (16 bytes)
        iv = f.read(16)
        # Read the ciphertext
        ciphertext = f.read()

    # Read the encryption key from the key.txt file
    with open('key.txt', 'rb') as key_file:
        key = key_file.read()

    # Derive the key using the password and salt
    cipher = Cipher(algorithms.AES(key), modes.CBC(iv), backend=default_backend())
    decryptor = cipher.decryptor()

    # Decrypt the ciphertext
    decrypted_data = decryptor.update(ciphertext) + decryptor.finalize()

    # Remove PKCS7 padding
    unpadder = padding.PKCS7(128).unpadder()
    unpadded_data = unpadder.update(decrypted_data) + unpadder.finalize()

    # Write the decrypted plaintext to the output file
    with open(output_file, 'w') as f:
        f.write(unpadded_data.decode('utf-8'))

    print("Decryption completed successfully!")

# Provide the paths of the encrypted file and output decrypted file
encrypted_file_path = "encrypted_output.txt"
decrypted_file_path = "decrypted_output.txt"

# Call the decrypt function
decrypt_file(encrypted_file_path, decrypted_file_path)

"""binary data to text data"""

def convert_binary_text_to_text(binary_text_file_path, output_text_file_path):
    # Read binary data from the input text file
    with open(binary_text_file_path, 'rb') as binary_text_file:
        binary_data = binary_text_file.read()

    # Decode binary data into text
    text_data = binary_data.decode('utf-8')  # Assuming UTF-8 encoding, change if different

    # Write the decoded text to the output file
    with open(output_text_file_path, 'w') as output_text_file:
        output_text_file.write(text_data)

# Provide the paths of the binary text input file and output text file
binary_text_file_path = "decrypted_output.txt"
output_text_file_path = "output_text_file.txt"

# Call the function to convert binary text data to text
convert_binary_text_to_text(binary_text_file_path, output_text_file_path)